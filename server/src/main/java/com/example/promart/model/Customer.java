package com.example.promart.model;

import java.time.LocalDateTime;
import java.util.*;

import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "customers") // MongoDB collection
public class Customer {
    @Id
    private String id; // Auto-generated by MongoDB
    private String customerName;
    private String customerEmail;

    // Analytics Fields
    @CreatedDate
    private LocalDateTime createdAt; // Timestamp for account creation
    private LocalDateTime lastOrderDate; // Last order timestamp
    private LocalDateTime lastVisitedAt; // Last interaction timestamp
    private int totalOrders = 0; // Number of orders placed
    private double totalSpent = 0.0; // Total amount spent
    private double averageOrderValue = 0.0; // TotalSpent / TotalOrders

    // Auto-Recommendation & ML Features
    private Set<String> favoriteCategories = new HashSet<>(); // Most purchased categories
    private Set<String> favoriteBrands = new HashSet<>(); // Most preferred brands
    private List<String> pastPurchases = new LinkedList<>(); // Stores last 10 product IDs
    private List<String> recommendedProducts = new ArrayList<>(); // Auto-generated recommendations
    private int purchaseFrequency = 0; // Orders per month
    private double loyaltyScore = 0.0; // Score for personalized offers

    // Constructors
    public Customer() {}

    public Customer(String customerName, String customerEmail) {
        this.customerName = customerName;
        this.customerEmail = customerEmail;
        this.createdAt = LocalDateTime.now();
    }

    // Getters and Setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getCustomerEmail() {
        return customerEmail;
    }

    public void setCustomerEmail(String customerEmail) {
        this.customerEmail = customerEmail;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getLastOrderDate() {
        return lastOrderDate;
    }

    public void setLastOrderDate(LocalDateTime lastOrderDate) {
        this.lastOrderDate = lastOrderDate;
    }

    public LocalDateTime getLastVisitedAt() {
        return lastVisitedAt;
    }

    public void setLastVisitedAt(LocalDateTime lastVisitedAt) {
        this.lastVisitedAt = lastVisitedAt;
    }

    public int getTotalOrders() {
        return totalOrders;
    }

    public void setTotalOrders(int totalOrders) {
        this.totalOrders = totalOrders;
    }

    public double getTotalSpent() {
        return totalSpent;
    }

    public void setTotalSpent(double totalSpent) {
        this.totalSpent = totalSpent;
    }

    public double getAverageOrderValue() {
        return averageOrderValue;
    }

    public void setAverageOrderValue(double averageOrderValue) {
        this.averageOrderValue = averageOrderValue;
    }

    public Set<String> getFavoriteCategories() {
        return favoriteCategories;
    }

    public void setFavoriteCategories(Set<String> favoriteCategories) {
        this.favoriteCategories = favoriteCategories;
    }

    public Set<String> getFavoriteBrands() {
        return favoriteBrands;
    }

    public void setFavoriteBrands(Set<String> favoriteBrands) {
        this.favoriteBrands = favoriteBrands;
    }

    public List<String> getPastPurchases() {
        return pastPurchases;
    }

    public void setPastPurchases(List<String> pastPurchases) {
        this.pastPurchases = pastPurchases;
    }

    public List<String> getRecommendedProducts() {
        return recommendedProducts;
    }

    public void setRecommendedProducts(List<String> recommendedProducts) {
        this.recommendedProducts = recommendedProducts;
    }

    public int getPurchaseFrequency() {
        return purchaseFrequency;
    }

    public void setPurchaseFrequency(int purchaseFrequency) {
        this.purchaseFrequency = purchaseFrequency;
    }

    public double getLoyaltyScore() {
        return loyaltyScore;
    }

    public void setLoyaltyScore(double loyaltyScore) {
        this.loyaltyScore = loyaltyScore;
    }

    // Method to update analytics after an order is placed
    public void updateAnalytics(String category, String brand, String productId, double orderAmount) {
        this.totalOrders += 1;
        this.totalSpent += orderAmount;
        this.averageOrderValue = this.totalOrders > 0 ? this.totalSpent / this.totalOrders : 0.0;
        this.lastOrderDate = LocalDateTime.now();

        // Update Favorite Categories and Brands
        this.favoriteCategories.add(category);
        this.favoriteBrands.add(brand);

        // Maintain last 10 purchases (FIFO)
        if (this.pastPurchases.size() >= 10) {
            this.pastPurchases.remove(0);
        }
        this.pastPurchases.add(productId);

        // Update loyalty score (e.g., total orders * 10 + total spent * 0.1)
        this.loyaltyScore = (this.totalOrders * 10) + (this.totalSpent * 0.1);
    }
}
